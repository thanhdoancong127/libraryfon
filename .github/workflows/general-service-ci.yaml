name: general service ci pipeline

on:
  push:
    branches: ["integration-test-tc"]
    paths:
      - 'book/**'
      - 'notification/**'
      - '.github/workflows/actions/action.yaml'
      - '.github/workflows/general-service-ci.yaml'
  workflow_dispatch:
jobs:
  # book-service-ci:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

  #     - run: mkdir -p ~/image-cache

  #     - id: postgres-cache
  #       uses: actions/cache@v1
  #       with:
  #           path: ~/image-cache
  #           # Adjust key to meet your cache time requirements e.g.
  #           # ${{ hashFiles(*) }} can be useful here to invalidate
  #           # cache on file changes
  #           key: postgres-cache-${{ runner.os }}

  #     - if: steps.postgres-cache.outputs.cache-hit != 'true'
  #       run: |
  #         docker pull postgres:16.2
  #         docker save -o ~/image-cache/postgres.tar postgres

  #     - if: steps.postgres-cache.outputs.cache-hit == 'true'
  #       run: docker load -i ~/image-cache/postgres.tar

  #     - id: rabbitmq-cache
  #       uses: actions/cache@v1
  #       with:
  #           path: ~/image-cache
  #           # Adjust key to meet your cache time requirements e.g.
  #           # ${{ hashFiles(*) }} can be useful here to invalidate
  #           # cache on file changes
  #           key: rabbitmq-cache-${{ runner.os }}

  #     - if: steps.rabbitmq-cache.outputs.cache-hit != 'true'
  #       run: |
  #         docker pull rabbitmq:3-management
  #         docker save -o ~/image-cache/rabbitmq.tar rabbitmq

  #     - if: steps.rabbitmq-cache.outputs.cache-hit == 'true'
  #       run: docker load -i ~/image-cache/rabbitmq.tar
        
  #     - uses: ./.github/workflows/actions
  #     - name: "Maven Build"
  #       run: mvn clean package -DskipTests -pl book -am

  #     - name: "Run Maven Test"
  #       run: mvn test jacoco:report -pl book -am
  # notification-service-ci:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

  #     - run: mkdir -p ~/image-cache

  #     - id: postgres-cache
  #       uses: actions/cache@v1
  #       with:
  #           path: ~/image-cache
  #           # Adjust key to meet your cache time requirements e.g.
  #           # ${{ hashFiles(*) }} can be useful here to invalidate
  #           # cache on file changes
  #           key: postgres-cache-${{ runner.os }}

  #     - if: steps.postgres-cache.outputs.cache-hit != 'true'
  #       run: |
  #         docker pull postgres:16.2
  #         docker save -o ~/image-cache/postgres.tar postgres

  #     - if: steps.postgres-cache.outputs.cache-hit == 'true'
  #       run: docker load -i ~/image-cache/postgres.tar

  #     - id: rabbitmq-cache
  #       uses: actions/cache@v1
  #       with:
  #           path: ~/image-cache
  #           # Adjust key to meet your cache time requirements e.g.
  #           # ${{ hashFiles(*) }} can be useful here to invalidate
  #           # cache on file changes
  #           key: rabbitmq-cache-${{ runner.os }}

  #     - if: steps.rabbitmq-cache.outputs.cache-hit != 'true'
  #       run: |
  #         docker pull rabbitmq:3-management
  #         docker save -o ~/image-cache/rabbitmq.tar rabbitmq

  #     - if: steps.rabbitmq-cache.outputs.cache-hit == 'true'
  #       run: docker load -i ~/image-cache/rabbitmq.tar
        
  #     - uses: ./.github/workflows/actions
  #     - name: "Maven Build"
  #       run: mvn clean package -DskipTests -pl notification -am

  #     - name: "Run Maven Test"
  #       run: mvn test jacoco:report -pl notification -am
  # docker-build:
  #   runs-on: ubuntu-latest
  #   needs: [book-service-ci, notification-service-ci]
  #   steps:

  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

  #     - name: "Log in to the Container registry"
  #       if: ${{ github.ref == 'refs/heads/integration-test-tc' }}
  #       uses: docker/login-action@v3.1.0
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: "Build and Push Image Book to ghcr.io"
  #       if: ${{ github.ref == 'refs/heads/integration-test-tc' }}
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./book/Dockerfile
  #         push: true
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/thanhdoancong127/libraryfon
  #           org.opencontainers.image.licenses=MIT
  #         tags: ghcr.io/thanhdoancong127/libraryfon/book:latest

  #     - name: "Build and Push Image Notification to ghcr.io"
  #       if: ${{ github.ref == 'refs/heads/integration-test-tc' }}
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./notification/Dockerfile
  #         push: true
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/thanhdoancong127/libraryfon
  #           org.opencontainers.image.licenses=MIT
  #         tags: ghcr.io/thanhdoancong127/libraryfon/notification:latest

  #     # - name: "Scan Docker Image with Trivy"
  #     #   if: ${{ github.ref == 'refs/heads/main' }}
  #     #   uses: aquasecurity/trivy-action@master
  #     #   with:
  #     #     image-ref: 'ghcr.io/nguyenvanhadncntt/skills_assessment/examination-service:latest'
  #     #     format: 'sarif'
  #     #     scan-type: 'image'
  #     #     severity: 'CRITICAL,HIGH'
  #     #     output: 'trivy-results.sarif'

  #     # - name: "Upload Trivy scan results to GitHub Security tab"
  #     #   if: ${{ github.ref == 'refs/heads/main' }}
  #     #   uses: github/codeql-action/upload-sarif@v2
  #     #   with:
  #     #     sarif_file: trivy-results.sarif
  #     #     category: 'image'
  borrowing-service-ci:
    runs-on: ubuntu-latest
    # needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - run: mkdir -p ~/image-cache

      - id: postgres-cache
        uses: actions/cache@v1
        with:
            path: ~/image-cache
            # Adjust key to meet your cache time requirements e.g.
            # ${{ hashFiles(*) }} can be useful here to invalidate
            # cache on file changes
            key: postgres-cache-${{ runner.os }}

      - if: steps.postgres-cache.outputs.cache-hit != 'true'
        run: |
          docker pull postgres:16.2
          docker save -o ~/image-cache/postgres.tar postgres

      - if: steps.postgres-cache.outputs.cache-hit == 'true'
        run: docker load -i ~/image-cache/postgres.tar

      - id: rabbitmq-cache
        uses: actions/cache@v1
        with:
            path: ~/image-cache
            # Adjust key to meet your cache time requirements e.g.
            # ${{ hashFiles(*) }} can be useful here to invalidate
            # cache on file changes
            key: rabbitmq-cache-${{ runner.os }}

      - if: steps.rabbitmq-cache.outputs.cache-hit != 'true'
        run: |
          docker pull rabbitmq:3-management
          docker save -o ~/image-cache/rabbitmq.tar rabbitmq

      - if: steps.rabbitmq-cache.outputs.cache-hit == 'true'
        run: docker load -i ~/image-cache/rabbitmq.tar

      - name: "Log in to the Container registry"
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Pull Image book:latest from ghcr.io"
        run: docker pull ghcr.io/thanhdoancong127/libraryfon/book:latest

      - name: "Pull Image notification:latest from ghcr.io"
        run: docker pull ghcr.io/thanhdoancong127/libraryfon/notification:latest

      - name: Check Docker Images
        run: docker images

      - uses: ./.github/workflows/actions
      - name: "Maven Build"
        run: mvn clean package -DskipTests -pl borrowing -am

      - name: "Run Maven Test"
        run: mvn test jacoco:report -pl borrowing -am